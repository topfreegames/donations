// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package models

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson85f0d656DecodeGithubComTopfreegamesDonationsModels(in *jlexer.Lexer, out *Game) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Items = make(map[string]Item)
				} else {
					out.Items = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Item
					(v1).UnmarshalEasyJSON(in)
					(out.Items)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "donationCooldownHours":
			out.DonationCooldownHours = int(in.Int())
		case "donationRequestCooldownHours":
			out.DonationRequestCooldownHours = int(in.Int())
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson85f0d656EncodeGithubComTopfreegamesDonationsModels(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"items\":")
	if in.Items == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Items {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"donationCooldownHours\":")
	out.Int(int(in.DonationCooldownHours))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"donationRequestCooldownHours\":")
	out.Int(int(in.DonationRequestCooldownHours))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"updatedAt\":")
	out.Raw((in.UpdatedAt).MarshalJSON())
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson85f0d656EncodeGithubComTopfreegamesDonationsModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson85f0d656DecodeGithubComTopfreegamesDonationsModels(l, v)
}
