// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package models

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonAcd0c35fDecodeGithubComTopfreegamesDonationsModels(in *jlexer.Lexer, out *Player) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gameID":
			out.GameID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "donationWindowStart":
			out.DonationWindowStart = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonAcd0c35fEncodeGithubComTopfreegamesDonationsModels(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gameID\":")
	out.String(string(in.GameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"donationWindowStart\":")
	out.Int64(int64(in.DonationWindowStart))
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAcd0c35fEncodeGithubComTopfreegamesDonationsModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAcd0c35fDecodeGithubComTopfreegamesDonationsModels(l, v)
}
